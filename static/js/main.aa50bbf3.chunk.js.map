{"version":3,"sources":["routes/routeRules.js","container/login/index.jsx","components/actionCard/index.js","container/users/index.jsx","routes/routesData.js","components/header/index.jsx","components/footer/index.js","layout/AppLayout.js","layoutRoute/AppRoute.js","layout/DefaultLayout.js","layoutRoute/DefaultRoute.js","App.js","serviceWorker.js","index.js"],"names":["routeRules","Login","props","history","useHistory","useState","userId","setUserId","password","setPassword","className","type","placeholder","onChange","value","target","onClick","e","preventDefault","localStorage","setItem","push","alert","ActionCard","title","icon","Users","location","useLocation","useType","setUserType","pathname","Helmet","routesData","key","path","component","auth","exact","Header","userType","getItem","menuArray","id","routes","disabled","map","menu","handleClick","to","activeClassName","Footer","AppLayout","children","AppRoute","Component","rest","render","matchProps","DefaultLayout","DefaultRoute","App","route","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aa50bbf3.chunk.js","sourcesContent":["export const routeRules = {\n    landing: \"/\",\n\n    login: \"/login\",\n\n    users: \"/users\",\n\n    hr: \"/hr\",\n    finance: \"/finance\",\n    inventory: \"/inventory\",\n    settings: \"/settings\",\n\n};","import React, {useState} from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport {routeRules} from \"../../routes/routeRules\";\n\nconst Login = (props) => {\n\n    const history = useHistory();\n\n    const [userId, setUserId] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const login = (e) => {\n        e.preventDefault();\n\n        if (userId === \"Admin\" && password === \"Admin\"){\n            localStorage.setItem('user', userId)\n            history.push(routeRules.hr)\n        } else if (userId === \"User\" && password === \"User\"){\n            localStorage.setItem('user', userId)\n            history.push(routeRules.hr)\n        } else {\n            alert(\"Please enter valid credentials\")\n        }\n    };\n\n    return (\n        <div className=\"container\">\n            <div className=\"login\">\n                <form className=\"login-form\">\n                    <div className=\"form-group\">\n                        <input type=\"text\"\n                               className=\"\"\n                               placeholder=\"Enter UserId\"\n                               onChange={({target: {value}}) => setUserId(value)}\n                               value={userId}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <input type=\"password\"\n                               className=\"\"\n                               placeholder=\"Password\"\n                               value={password}\n                               onChange={({target: {value}}) => setPassword(value)}\n                        />\n                    </div>\n                    <div className=\"text-center\">\n                        <button type=\"submit\"\n                                className=\"btn btn-primary\"\n                                onClick={login}>\n                            Sign In\n                        </button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n};\n\nexport default Login;","import React from 'react';\nimport './actionCard.css';\n\nconst ActionCard = ({title, icon}) => {\n    return (\n        <div className=\"action-card\">\n            <div className=\"title\">\n                <span>\n                    {title}\n                </span>\n            </div>\n\n            <div className=\"icon\">\n                <i className={icon}/>\n            </div>\n        </div>\n    );\n};\n\nexport default ActionCard;","import React, {useState} from 'react';\nimport { useLocation} from \"react-router\";\nimport { Helmet } from 'react-helmet'\nimport './users.css';\nimport ActionCard from \"../../components/actionCard\";\nimport {routeRules} from \"../../routes/routeRules\";\n\nconst Users = () => {\n\n    let location = useLocation();\n\n    const [useType, setUserType] = useState(\"\")\n\n    useState(() => {\n        if (location.pathname === routeRules.hr){\n            setUserType(\"HR\")\n        } else if (location.pathname === routeRules.inventory){\n            setUserType(\"Inventory\")\n        } else if (location.pathname === routeRules.finance){\n            setUserType(\"Finance\")\n        } else if (location.pathname === routeRules.settings){\n            setUserType(\"Settings\")\n        }\n    }, [])\n\n    return (\n        <div className=\"page-wrapper\">\n            <Helmet title={`Rajyug | ${useType}`} />\n\n            <div className=\"container\">\n                <div className='d-flex pt-4'>\n                    <ActionCard icon={\"fas fa-users\"} title={`${useType} Master`}/>\n                    <ActionCard icon={\"far fa-calendar-alt\"} title={`${useType} Transaction`}/>\n                    <ActionCard icon={\"far fa-edit\"} title={`${useType} Dashboard`}/>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Users;","import {routeRules} from \"./routeRules\";\nimport Login from \"../container/login\";\nimport Users from \"../container/users\";\n\nexport const routesData = [\n    {\n        key: routeRules.login,\n        path: routeRules.login,\n        component: Login,\n        auth: false,\n        exact: false\n    },\n    {\n        key: routeRules.users,\n        path: routeRules.users,\n        component: Users,\n        auth: true,\n        exact: false\n    },\n    {\n        key: routeRules.hr,\n        path: routeRules.hr,\n        component: Users,\n        auth: true,\n        exact: false\n    },\n    {\n        key: routeRules.finance,\n        path: routeRules.finance,\n        component: Users,\n        auth: true,\n        exact: false\n    },\n    {\n        key: routeRules.inventory,\n        path: routeRules.inventory,\n        component: Users,\n        auth: true,\n        exact: false\n    },\n    {\n        key: routeRules.settings,\n        path: routeRules.settings,\n        component: Users,\n        auth: true,\n        exact: false\n    }\n];","import React from 'react';\nimport './header.css'\nimport {routeRules} from \"../../routes/routeRules\";\nimport { NavLink} from \"react-router-dom\";\n\nconst Header = () => {\n\n    const userType = localStorage.getItem('user');\n\n    const menuArray = [\n        {id: 'hr', title: 'HR', routes: routeRules.hr, disabled: false },\n        {id: 'finance', title: 'Finance', routes: routeRules.finance, disabled: !(userType === \"Admin\") },\n        {id: 'inventory', title: 'Inventory', routes: routeRules.inventory, disabled: true },\n        {id: 'settings', title: 'Settings', routes: routeRules.settings, disabled: true },\n    ]\n\n    const backward = () => {\n\n    }\n\n    const forward = () => {\n\n    }\n\n    const   handleClick = (e , disabled) => {\n        if(disabled) e.preventDefault()\n    }\n\n    return (\n        <div className='header-wrapper'>\n            <div className=\"navigator left\" onClick={backward}>\n                {\"<<\"}\n            </div>\n            <div className=\"navigator right\" onClick={forward}>\n                {\">>\"}\n            </div>\n            <div className=\"top-menu d-flex\">\n                {\n                    menuArray.map((menu) => {\n                        return (\n                            <NavLink\n                                onClick={(e) => handleClick(e, menu.disabled)}\n                                to={menu.routes}\n                                key={menu.id}\n                                activeClassName=\"selected\"\n                                className=\"menu-item\"\n                            >\n                                {menu.title}\n                            </NavLink>\n                        )\n                    })\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default  Header;\n","import React from 'react';\nimport './footer.css';\n\nconst Footer = () => {\n    return (\n        <div className=\"footer\">\n\n        </div>\n    );\n};\n\nexport default Footer;","import React from 'react';\nimport Header from \"../components/header\";\nimport Footer from \"../components/footer\";\n\nconst AppLayout = (props) => {\n    return (\n        <>\n            <Header/>\n            {props.children}\n            <Footer/>\n        </>\n    );\n};\n\nexport default AppLayout;","import React from 'react';\nimport {Route, Redirect} from \"react-router-dom\";\nimport AppLayout from \"../layout/AppLayout\";\n\nconst AppRoute = ({ component: Component, ...rest }) => {\n    return (\n        <Route\n            {...rest}\n            render={matchProps => {\n                if (true){\n                    return (\n                        <AppLayout {...matchProps}>\n                            <Component {...matchProps}/>\n                        </AppLayout>\n                    )\n                } else {\n                    return (\n                        <Redirect\n                            to={{\n                                pathname: \"/\",\n                                state: {\n                                    from: matchProps.location\n                                }\n                            }}\n                        />\n                    )\n                }\n            }}\n        />\n    );\n};\n\nexport default AppRoute;\n","import React from 'react';\n\nconst DefaultLayout = (props) => {\n    return (\n        <>\n            {props.children}\n        </>\n    );\n};\n\nexport default DefaultLayout;","import React from 'react';\nimport { Route } from \"react-router-dom\";\nimport DefaultLayout from \"../layout/DefaultLayout\";\n\nconst DefaultRoute = ({component: Component, ...rest }) => {\n    return (\n        <Route\n            {...rest}\n            render={matchProps => {\n                return (\n                    <DefaultLayout {...matchProps}>\n                        <Component {...matchProps}/>\n                    </DefaultLayout>\n                )\n            }}\n        />\n    );\n};\n\nexport default DefaultRoute;\n","import React from 'react';\nimport {BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport {routeRules} from \"./routes/routeRules\";\nimport {routesData} from \"./routes/routesData\";\nimport AppRoute from \"./layoutRoute/AppRoute\";\nimport DefaultRoute from \"./layoutRoute/DefaultRoute\";\n\nfunction App() {\n    return (\n        <>\n            <Router>\n                <Switch>\n                    <Route exact path='/'>\n                        <Redirect to={routeRules.login}/>\n                    </Route>\n                    <Route exact path='/rajyug'>\n                        <Redirect to={routeRules.login}/>\n                    </Route>\n                    {\n                        routesData.map(route => {\n                            if (route.auth){\n                                return <AppRoute {...route}/>\n                            } else {\n                                return <DefaultRoute {...route}/>\n                            }\n                        })\n                    }\n                </Switch>\n            </Router>\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './assets/css/main.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}